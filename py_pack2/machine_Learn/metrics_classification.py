# You can also use this section to suppress warnings generated by your code:
def warn(*args, **kwargs):
    pass


import warnings

warnings.warn = warn
warnings.filterwarnings('ignore')
import pandas as pd
from sklearn.linear_model import LogisticRegression
# import functions for train test split
from sklearn.model_selection import train_test_split

# functions for metrics
from sklearn.metrics import confusion_matrix
from sklearn.metrics import precision_score
from sklearn.metrics import recall_score
from sklearn.metrics import f1_score
import matplotlib.pyplot as plt

# the data set is available at the url below.
URL = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-BD0231EN-SkillsNetwork/datasets/diabetes.csv"
# using the read_csv function in the pandas library, we load the data into a dataframe.
df = pd.read_csv(URL)
df.sample(5)
print(df.shape)
print(df.columns)
df.Outcome.value_counts()
df.Outcome.value_counts().plot.bar()
# plt.show()

y = df["Outcome"]
X = df[['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin',
        'BMI', 'DiabetesPedigreeFunction', 'Age']]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=40)
classifier = LogisticRegression()
classifier.fit(X_train, y_train)
print(classifier.score(X_test, y_test))  #Higher the score ,better the model
#To compute the detailed metrics we need two values, the original mileage and the predicted mileage.
original_values = y_test
predicted_values = classifier.predict(X_test)
#Precision
print(precision_score(original_values, predicted_values))  # Higher the value the better the model
##### Recall
print(recall_score(original_values, predicted_values))
#F1 Score
print(f1_score(original_values, predicted_values))
#Confusion Matrix
print(confusion_matrix(original_values, predicted_values)) # can be used to manually calculate various met
